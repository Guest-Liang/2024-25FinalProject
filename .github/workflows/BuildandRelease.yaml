name: Electron Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    name: ${{ github.event.inputs.custom_name || 'Electron Build' }} - ${{ matrix.platform }} - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}  # use matrix.os to specify different running environment

    strategy:
      matrix:
        include:
          - platform: win
            os: windows-latest

          - platform: linux
            os: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'

      - name: Install pnpm
        run: |
          npm install -g pnpm

      - name: Install frontend dependencies and build # vue build
        run: |
          pnpm install
          pnpm run build-only
        working-directory: ./frontend

      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install backend Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: ./backend

      - name: Build Python backend for ${{ matrix.platform }}
        run: |
          python pyi_auto_pack_ci.py ${{ matrix.platform }}
        working-directory: ./backend

      - name: Modify package.json for platform-specific resources
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" == "win" ]; then
            BACKEND_PATH="../backend/dist/windows/"
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            BACKEND_PATH="../backend/dist/linux/"
          fi
          export BACKEND_PATH

          node -e "
          const fs = require('fs');
          const path = require('path');
          const backendPath = process.env.BACKEND_PATH;
          const packageJsonPath = './frontend/package.json';
          const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

          if (backendPath === '../backend/dist/linux/') {
            packageJson.build.extraResources = []
          } else {
            packageJson.build.extraResources = [
              { from: '../backend/dist/pic', to: 'APIDataDir/pic' },
              { from: backendPath, to: 'APIDataDir' },
            ]
          }
          fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2))
          "
        env:
          BACKEND_PATH: ${{ env.BACKEND_PATH }}

      - name: Build Electron app for ${{ matrix.platform }}
        shell: bash      
        run: |
          echo "Building Electron app for ${{ matrix.platform }} on ${{ matrix.os }}"
          if [ "${{ matrix.platform }}" == "win" ]; then
            pnpm electron-builder --win
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            pnpm electron-builder --linux
          fi
        working-directory: ./frontend

      - name: Organize files for upload
        shell: bash
        run: |
          mkdir -p ./upload
          if [ "${{ matrix.platform }}" == "win" ]; then
            mv ./frontend/build/*.exe ./upload/
            mv ./frontend/build/*.zip ./upload/
          elif [ "${{ matrix.platform }}" == "linux" ]; then
            appimage=$(find ./frontend/build -name "*.AppImage")
            mv "$appimage" ./upload/

            temp_dir=$(mktemp -d)
            7z x "./upload/$(basename "$appimage")" -o"$temp_dir"

            mv ./backend/dist/linux/* "$temp_dir/resources/"
            tar -czvf "./upload/$(basename "${appimage%.AppImage}.tar.gz")" -C "$temp_dir" .

            rm -rf "$temp_dir"
            rm ./upload/*.AppImage
          fi
        working-directory: .

      - name: Upload build artifacts for ${{ matrix.platform }} on ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.platform }}-${{ matrix.os }}
          path: ./upload

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download Linux Artifact
      uses: actions/download-artifact@v4
      with:
        name: electron-build-linux-ubuntu-latest
        path: ./build

    - name: Download Windows Artifact
      uses: actions/download-artifact@v4
      with:
        name: electron-build-win-windows-latest
        path: ./build

    - name: Retrieve Versions
      id: get_versions
      run: |
        API_VERSION=$(grep 'Version\s*=\s*"v' backend/Configs.py | sed -E 's/.*Version\s*=\s*"v([^"]+)".*/\1/')
        ELE_VERSION=$(grep -A 5 'class Electron:' backend/Configs.py | grep 'Version\s*=' | sed -E 's/.*=\s*"([^"]+)".*/\1/')
        export API_VERSION
        export ELE_VERSION

        echo "API_VERSION=$API_VERSION" >> $GITHUB_ENV
        echo "ELE_VERSION=$ELE_VERSION" >> $GITHUB_ENV

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      with:
        # 使用临时tag，稍后在GitHub中手动编辑
        tag_name: "temp-draft-tag"
        release_name: "Electron v${{ env.ELE_VERSION }}, Django API v${{ env.API_VERSION }}"
        body: ""
        draft: true
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Find Linux file
      id: find_linux
      run: |
        # 找出 final 目录下的 *.tar.gz 文件
        FILE=$(ls final/*.tar.gz | head -n 1)
        echo "LINUX_FILE=$FILE" >> $GITHUB_ENV
        export LINUX_FILE

    - name: Upload Linux Release Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.LINUX_FILE }}
        asset_name: linux_file
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


    - name: Find Windows exe file
      id: find_windows_exe
      run: |
        EXE_FILE=$(ls final/*.exe | head -n 1)
        echo "WIN_EXE_FILE=$EXE_FILE" >> $GITHUB_ENV
        export WIN_EXE_FILE

    - name: Upload Windows Release Asset #1
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_EXE_FILE }}
        asset_name: windows_file_exe
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Find Windows zip file
      id: find_windows_zip
      run: |
        ZIP_FILE=$(ls final/*.zip | head -n 1)
        echo "WIN_ZIP_FILE=$ZIP_FILE" >> $GITHUB_ENV
        export WIN_ZIP_FILE

    - name: Upload Windows Release Asset #2
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.WIN_ZIP_FILE }}
        asset_name: windows_file_zip
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
